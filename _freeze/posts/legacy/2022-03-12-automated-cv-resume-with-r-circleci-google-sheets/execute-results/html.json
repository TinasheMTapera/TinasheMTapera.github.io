{
  "hash": "436c0cd6073a6c58a523c51374eb818c",
  "result": {
    "markdown": "---\ntitle: Automated CV/Resume with R, CircleCI, & Google Sheets\nauthor: Tinashe M. Tapera\ndate: '2022-03-12'\nslug: []\ncategories:\n  - data science\n  - rmarkdown\n  - R\n  - continuous integration\ntags:\n  - data science\n  - r\n  - R Markdown\n\n# comments: no\nshowcomments: yes\nshowpagemeta: yes\n---\n\n\n<center><b>I hate updating my resume.</b></center>\n\nA couple of years ago I was in a corporate tool limbo as I'd just left Drexel University,\nso my license with Microsoft Word had expired. In addition to having the most\ndifficult time collaborating with MSW users on a paper, I also didn't have a way\nto efficiently edit the resumes and CVs I'd developed. I tried opening files in\n[Libre Office](https://www.libreoffice.org/), which is a great freeware option\nfor the office suite of tools, but frankly didn't give seamless transition\nbetween features in MS.\n\n# Why Ditch MS Word for Your CV?\n\nDon't get me wrong -- using MS products is all well and good when that's pretty\nmuch all you do. I once got into an argument with a law graduate friend who made\na very convincing point about how templates are easily transferred, signatures\ntracked and authenticated, and multiple versions of documents in print composition\ncan be compared in their field. But as someone who writes code, I want out of\nany scenario where I can't just edit plain text for most of the work.\nThis is part of a philosophy of the difference between a plain text\neditor and a word processor. A word processor workflow does a lot of work for you by\nhaving a point-and-click GUI that formats and automates the styling of a document,\nwhereas a plain text editor leaves you to only edit the content -- no frills,\nno special effects, just content. Then, once you're happy with the _content_ of\nyour document, you can work on the _typesetting_, or how it will look on a page.\n\nThis separation of content creation and typesetting is, in my opinion, a far more\nproductive workflow that should be adopted by everyone. In fact, if you've ever\nwritten a letter in MS Word, you probably already have adopted this workflow\nin the form of _templates_. For a better explanation of why you might want to\nseparate content creation and typesetting, see [this blog post](https://richardlent.github.io/post/the-plain-text-workflow/).\nBut there's more to appreciate here when you are\nsomeone who writes code for a living. When you create documents with code\nyou get all the advantages that come with coding too,\nmost importantly: version control, continuous integration, and formatting management.\n\n## Version Control with MS Word Sucks\n\nIf you've ever created a document and named it `myreport_ProfessorXfeedback_version4_March12_FINAL.docx`,\nyou already know what I mean. \n\n<img src=\"http://www.phdcomics.com/comics/archive/phd101212s.gif\" alt=\"version control sucks\">\n\nCredit: [PhDcomics.com](https://PhDcomics.com)\n\nUsing plain text gives you the ability to version\ncontrol files with Git+Github and similar tools, which gives you clearer commit\nhistory, change integration, etc. Now, admittedly, MS Word claims to have a\nversion control system but I've never had much success with that, being totally\nhonest, especially in comparison to Git-based workflows.\n\n## Formatting\n\nIn addition to version control sucking in MS word, managing reference format with\nsomething like `bibtex` also sucks; managing special characters from `latex` is a\nhuge pain that isn't handled well by MSW either. Again, _plain text_ let's you\nsee things as you generate them, and worry about what they look like on a page\nlater. Not to mention... tables ðŸ˜¤\n\n<iframe id=\"reddit-embed\" src=\"https://www.redditmedia.com/r/mildlyinfuriating/comments/i4r2ox/when_word_refuses_to_align_tables/?ref_source=embed&amp;ref=share&amp;embed=true\" sandbox=\"allow-scripts allow-same-origin allow-popups\" style=\"border: none;\" height=\"420\" width=\"640\" scrolling=\"no\"></iframe>\n\nOnce again, you don't have to worry about this formatting nonsense until you're\nready to \"publish\" your work, and when you are, you have the option to choose\nfrom a variety of formats that your content just gets dumped into. ~~This website,\nfor example,~~^[The old version of this site] is built on the [Goa template](https://github.com/kaapiandcode/hugo-goa) from the [Hugo web framework](https://gohugo.io/). I just generate content in any plain text editor,\nand drop it into the framework that renders all the fancy bits for me. Speaking\nof which...\n\n## Continuous Integration\n\nThe best part of this project was making something that could be regenerated any\ntime I needed it to, by an automated service. As opposed to having to open the\nWord document myself, make edits, save it, and export it, I have set up a system\nthat does all of that for me at the push of a button. The only thing _I_ need to\ndo to make it work, is to edit the data that goes _into_ the document. I do this with\ngoogle sheets, but any data source can be used. This means when I earn a new title,\npublication, or role, I just open up google sheets, add a line to the doc with\nthe details, then hit \"Rerun\" on the CircleCI continuous intergation service.\n\nThat's it; that's really it. No aligning tables, no content formatting, no shoddy\nprint previews, and the output is accessible from CircleCI any time I need it.\n\n# The Workflow\n\nThe downside to this approach should be apparent: **you have to set it up first.**\nThis entire project took me about 2 or 3 nights on-and-off, but wasn't particularly\nchallenging. Fortunately, a lot of folks have already accomplished this and it\nwas easy to follow their instructions, clone their code, and adjust it for my\nown usage. Hence, I'm not going to explain how to do it in this post -- just\ndemonstrate the benefits of doing it. The [Google search results](https://www.google.com/search?q=curriculum+vitae+in+Rmarkdown&sxsrf=APq-WBt8gbmUdcI3cS0kq3tkcSnGuOmEiw%3A1647108030894&ei=vt8sYsySNoyZptQPib6wsAc&ved=0ahUKEwjM6dnIk8H2AhWMjIkEHQkfDHYQ4dUDCA4&uact=5&oq=curriculum+vitae+in+Rmarkdown&gs_lcp=Cgdnd3Mtd2l6EAMyBggAEBYQHjoHCAAQRxCwAzoHCAAQsAMQQzoECCMQJzoKCC4QxwEQrwEQJzoECAAQQzoFCAAQkQI6BQgAEIAEOg0ILhCxAxDHARCjAhAKOg4ILhCABBCxAxDHARCvAToOCC4QgAQQsQMQxwEQ0QM6BwgAEMkDEEM6CAgAEIAEELEDOgcIABCxAxBDOggIABCxAxCRAjoLCAAQgAQQsQMQgwE6CwguEIAEEMcBEK8BOgoIABCABBCHAhAUOgQIABANOggIABAIEA0QHjoKCAAQCBANEAoQHkoECEEYAEoECEYYAFDTAlieN2CBOWgBcAF4AIABwQGIAf8MkgEEMTYuNJgBAKABAcgBCsABAQ&sclient=gws-wiz)\nfor this task are full of options, but I especially benefited the most from\n[Matt Learyâ€™s resume template](https://github.com/mleary/resume) and\n[Sam Abbottâ€™s CV template](https://github.com/seabbs/cv). Ultimately, the\nworkflow looks like this:\n\n<img src=\"cv_wf.png\" alt=\"\" style=\"width:700px;height:450px;\">\n\n## Input data from Google sheets\n\nThis is where it all starts; I found it great to organise it in a [_tidy_ format](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)\n(each data point is a value, each column is a variable, each row is an observation).\nFurthermore, I can separate the data into different sheets for different CV categories.\n\n<img src=\"cv_inputs.png\" alt=\"\" style=\"width:700px;height:450px;\">\n\n## Read in Data In .Rmd\n\nI wrote a [script](https://github.com/TinasheMTapera/ReproducibleResumeCV/blob/main/run.R) in R that \nsets up and calls the Rmarkdown scripts, with configured parameters for both\nthe long form CV and the one page resume. \nThe RMarkdowns read in the data and parse it into a tidy\nformat ready for the [`vitae`](https://pkg.mitchelloharawild.com/vitae/) and\n[`pagedown`](https://pagedown.rbind.io/) packages -- these do most of the hard\nwork.\n\n## Knit with `CSS` + `Latex`\n\nThe packages for R CVs and resumes come with CSS definition files; I [tinkered](https://github.com/TinasheMTapera/ReproducibleResumeCV/commit/3a19029f0904f81c2cfa070fe6e4d9aec91f96af)\nwith these minimally, but I'm considering asking a CSS professional to make me a\nunique one. Once they're ready to render, `knitr` takes it away, with some help\nfrom `latex`.\n\n## Circle CI\n\nLastly, I created a [Dockerfile](https://github.com/TinasheMTapera/ReproducibleResumeCV/blob/main/Dockerfile) that runs the above procedure on CircleCI. Once you upload the project\nto Github, and link that to Circle, then any time you add a commit to Github,\nthe procedure runs as a job. You can configure how CircleCI runs in the `config.yml`,\nincluding _storing the output files!_ [These lines](https://github.com/TinasheMTapera/ReproducibleResumeCV/blob/main/.circleci/config.yml#L41-L50) demonstrate how Circle knows to store outputs.\n\n# Running It\n\nNow, whenever I need a new copy of my CV or resume, I just hop on to Google Sheets,\nupdate a new line of info, head over to Circle CI and hit \"Re-run workflow\".\n\nLike magic, [brand new CV](http://tinashemtapera.com/cv/tinashemtapera_cv.pdf)!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}